PLIP 9315: New theme for Plone 4
================================

PLIP ticket: https://dev.plone.org/plone/ticket/9315

Second Review by Rob Gietema (rob@fourdigits.nl, Rob|4D on irc)

The PLIP was reviewed on Mac OS X 10.6 using python 2.6.1 and Firefox 3.5.3.


Review steps
------------

- Run buildout using the plip9315-new-theme.cfg file.

- Review of the plonetheme.sunburst package contents.

- Used http://jigsaw.w3.org/css-validator/validator to check if all css was
  valid.

- Started instance, created site, installed sunburst theme.

- Validated html of the front-page.

- Validated Accessibility using the checklist at:
  http://www.w3.org/TR/WCAG10/full-checklist.html

- Review of the design and usability.


Notes and observations
----------------------

- Skin folders are renamed as suggested.

- All empty files except viewlets.py are removed as suggested

- As stated before, the css is valid CSS3 (except for the -moz- and -webkit-
  stuff) but not valid css 2.1. I'm in favor of early adaption but the fact is
  a lot of users (especially goverment) still require css 2.1. There are two
  easy solutions to fix this, 1) create a separate css3 addon css file which can
  be included if you want 'eyecandy', 2) add dtml statements in the public.css
  file and use a setting like 'use css3'.

- Html validation

  - I don't see a doctype added yet.

  - I don't see character encoding specified yet (should be the first meta).

- The following issues do not meet the accessibility requirements:

  - Inline style elements are used, where classes should be used.
    - cursor: pointer in label searchbox_currentfolder_only
    - empty style tag in LSResults
    - display: none in kssPortalMessage

  - sup tags are used where css should be used. Sub and sup can only be used
    if the meaning of the content is different not for presentation's sake. see:
    http://dev.w3.org/html5/spec/Overview.html#the-sub-and-sup-elements

    your reply: The registered trademark symbol is supposed to be superscript,
    do you see any other use that conflicts with this?

    I know this is a really minor detail but just for the record since (r) and
    <sup>(r)</sup> don't have a different meaning you shouldn't use the sup tag
    but use a span with a class and use css to make the (r) supscript.

- h1 - h6 tags should be used for document structure and no levels should be
  skipped. Like the current theme this theme also uses h5 tags without using h2
  till h4.

  your reply: My goal was to change as little as possible of the existing
  markup. If we introduce new tags for the h5s, we might break existing themes.
  I'm happy to make this change in Plone 5 where we are doing more significant
  markup changes, but I don't think it's worth being purist about it at this
  point.

  The markup is already changed for other issues. Since this is really invalid
  html I don't agree with the 'let's keep it compatible' argument. Plone 4 is a
  major release and generating valid html is a big issue. I am also pretty sure
  everybody uses the classes on those tags and not the tags as css selectors.

- Even more so then the current theme the contentview tabs and the formtabs
  look the same. Contentview tabs make you 'leave' the current page and the
  formtabs keep you on the same page. This is confusing for users to see
  different behavior for controls who look the same.

  your reply: I'll beg to differ, sorry Ñ they do the same thing, show aspects
  of a content type, the fact that some reload and some don't is a different
  issue. They are trying to express the same concept, and while the
  implementation isn't ideal, they are expressing the same kind of grouping
  (although on different levels). We're getting rid of these in Plone 5, so they
  will be short-lived anyway. Nobody really wants two levels of tabs. :)

  I don't agree it's the same functionality. The bottom tabs are indeed used
  for grouping, as can be seen when you disable javascript, the page is a bit
  long that way but it still logical. The top level tabs really shouldn't be
  tabs since the are not used for grouping. When you would remove those tabs
  and put all the content of the individual tabs below each other on one page
  that page wouldn't make sense at all. Replacing the top level tabs with
  buttons seems more logical to me.

- The PLIP states: "Keep the theme color-neutral (black, white, grays)" but I
  see green and blue are used which are not color-neutral.

  your reply: Some colors are non-negotiable Ñ you need blue links, and I reused
  the same blue for the global navigation (just inverted). There's a lot of
  documentation that talks about "the green bar", so in the interest of keeping
  things simple, I added that color too. Those are the two only colors, and they
  are trivial to change, and examples of how to do it are provided in
  ploneCustom.css.

  I'm +0 on this. I understand it's easy to change those attributes but I'm not
  100% convinced what a better 'default' is: 'a better design' or 'a good
  starting point for integrators to build a site on'.

- Html 5

  Like mentioned in my first review I still don't like switching to HTML5 at
  this point. Denys also has some valid points at:
  https://dev.plone.org/plone/ticket/9315#comment:30

  I don't see the advantages of using HTML5 at this moment but I do see a lot
  of disadvantage like mentioned in my first review. Like Denys mentioned
  changing just the main_template to use HTML5 is not enough, all other
  templates should also be changed if we really want to support HTML5 fully
  I suggest stick to xhtml 1 strict and work on a separate branche so we can
  fully support HTML5 in a slightly modified theme so integraters can choose by
  then.

- The missing stylesheets in the initial review (print, mobile etc) all look
  valid.

- I also noticed base_properties was added but a lot of the options were removed
  I think this will break a lot of addon products (I know for sure TinyMCE
  won't work with the current base_properties). All the FWT members approved
  this plip but did mention the base_properties should be kept. I understand
  you can easily change the values in the css to change the colors but there are
  different usecases where base_properties can be really usefull. For TinyMCE
  I use them to style the complete TinyMCE widget. Since the widget uses a lot
  of different elements (toolbars, dialogs, statusbar etc) I can't just simply
  add the same class as used by the global colors. When using base_properties I
  can get all the colors, line colors, width etc and apply them to my widget.

- Visually I like the new design a lot, it's a lot better then the old theme.


Conclusion
----------

The new theme is a real improvement over the old one however I don't agree with
switching to HTML5 and CSS3 by default and removing most of the base_properties.
I'm +0 on merging.
