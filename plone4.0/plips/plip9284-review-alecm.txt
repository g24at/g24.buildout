Summary
==========

This PLIP involves patches to Products.CMFCore to fix what is essentially a
bug in Skinnable.py where traversal precedence behaves differently at the
portal root than at objects higher in the site hierarchy. Because of this I'm
not entirely sure it's acceptance is a matter for the Framework Team to
decide, but rather one for the CMF release manager. Nonetheless, I've reviewed
the code.

Unfortunately, the branching of Products.CMFCore happened right before a major
refactoring of CMFCatalogAware, so the Plone tests will not run with the
current buildout setup. After reverting the relevant Plone packages, there
appear to be test failures in Products.CMFPlone which don't occur without
these CMFCore changes. These include WebDAV (index_html lookups) and CSRF
failures. The changes also appear to have triggered test failures in
ATContentTypes, CMFPlacefulWorkflow, PasswordResetTool, ResourceRegistries,
and other CMF and Plone packages.

Through the web testing confirms Plone continues to function as expected, and
that views now override skin items of the same name at the portal root,
consistent with behavior in other locations. The new tests in CMFCore appear
to be reasonable and complete.

Issues and Concerns 
----------------------

Aside from the test failures, which seem fairly serious and obviously need to
be addressed, there are a few other potential problems with the implementation
of this PLIP.

My feeling is that there is far too much code copied in from
ZPublisher.BaseRequest and OFS.Traversable. It's fairly clear why this code
duplication is necessary since SkinnableObjectManager essentially requires
custom traversal that is mostly identical to the default traversal behavior.
However, I think it should be possible to perform a simple check for the
usecase that the PLIP is concerned with and then fall back to the original
code if possible. For example, given a name to traverse to, the code could
ensure there's no __bobo_traverse__, no non-acquired non-skin attribute for
the name, and that there is a multi-adapter/view for the name. If all these
are true, then it would return the multi-adapter as appropriate, otherwise it
could just run the original method.

Reimplementing the traversal code with a few minor changes inside CMFCore adds
a significant additional maintenance burden for that product. Unless there are
some demonstrable performance problems that would result from checking some of
these attributes twice, I don't think there's a compelling reason to
completely duplicate these fairly complicated code paths.

In any case, I don't believe the final decision on this PLIP is ours to make.
The PLIP author should contact the CMF core developers directly and discuss
the possiblity of including these improvements in the appropriate release,
preferably after the concerns above have been addressed.

-0 on including this PLIP in its current state. If the test failures are
addressed, and if the code duplication is minimized, I suggest we support
Matthew in his efforts to have these changes included in CMFCore. I believe it
is very important that we fix this bug.
