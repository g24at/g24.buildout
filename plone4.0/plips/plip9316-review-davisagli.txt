PLIP 9316: Unify folder implementations
=======================================

PLIP ticket: http://dev.plone.org/plone/ticket/9316

Review #1 by David Glick (dglick@gmail.com, davisagli on irc)

The PLIP was reviewed on Mac OS X 10.5.8 using python 2.6 and Firefox 3.5.2.


Review steps
------------

- Run buildout using the plip9316-unified-folders.cfg file.

- Visual review of the new packages plone.folder and plone.app.folder
  as well as accompanying changes in Archetypes, ATCT, and Plone.

- Reviewed performance benchmarks included in the PLIP text.

- Run bin/alltests

- Check test coverage


Notes and observations
----------------------

* The implementation seems reasonable overall.  I am happy with the compromise
  found between facilitating future extensibility (e.g. by handling ordering
  via an adapter) while also providing backwards-compatibility with existing
  folder implementations.

* The original PLIP discussed the creation of a special view optimized for
  viewing folders with many items.  I presume this was dropped due to the
  separate PLIP for revamping the collection UI?  That's probably fine.

* The original PLIP also discussed some migration code for converting existing
  the internal data structures of existing folders.  Does this code exist
  where where it can be reviewed?  It's crucial that we get this right, of
  course, and that it can be made to work for custom subclasses of ATFolder
  as well.  Assuming this concern is addressed, it looks like custom subclasses
  will simply pick up the new mixin and "just work" as long as they aren't
  overriding the old ordering implementation.

* The extension profile in plone.app.folder appears to merely duplicate the
  change that was made in CMFPlone's Folder.xml.  If the profile is still
  needed for compatibility with Plone 3, then it should be added to
  Plone 4's lists of non-installable products (in setuphandlers.py) and
  non-installable profiles (in factory.py), so that it doesn't show up in
  the quick installer and the Plone site add form, respectively.

* bin/alltests shows erroring tests in a bunch of packages, mostly with a traceback and error similar to the following:
{{{
Traceback (most recent call last):
  File "/Users/davidg/.buildout/eggs/zope.testing-3.7.7-py2.6.egg/zope/testing/testrunner/runner.py", line 361, in run_layer
    setup_layer(options, layer, setup_layers)
  File "/Users/davidg/.buildout/eggs/zope.testing-3.7.7-py2.6.egg/zope/testing/testrunner/runner.py", line 518, in setup_layer
    layer.setUp()
  File "/Users/davidg/.buildout/eggs/Products.PloneTestCase-0.9.8-py2.6.egg/Products/PloneTestCase/layer.py", line 33, in setUp
    func(*args, **kw)
  File "/Users/davidg/.buildout/eggs/Products.PloneTestCase-0.9.8-py2.6.egg/Products/PloneTestCase/setup.py", line 194, in setupPloneSite
    base_profile, extension_profiles).run()
  File "/Users/davidg/.buildout/eggs/Products.PloneTestCase-0.9.8-py2.6.egg/Products/PloneTestCase/setup.py", line 244, in run
    self._setupHomeFolder()
  File "/Users/davidg/.buildout/eggs/Products.PloneTestCase-0.9.8-py2.6.egg/Products/PloneTestCase/setup.py", line 339, in _setupHomeFolder
    _createHomeFolder(portal, default_user, take_ownership=0)
  File "/Users/davidg/.buildout/eggs/Products.PloneTestCase-0.9.8-py2.6.egg/Products/PloneTestCase/setup.py", line 446, in _createHomeFolder
    _createObjectByType('Folder', members, id=member_id)
  File "/Users/davidg/ONENW/plip9316/src/Plone/Products/CMFPlone/utils.py", line 343, in _createObjectByType
    fti.getId())
ValueError: Product factory for Folder was invalid
}}}
There are also a lot of test issues in Archetypes.  There are even 2 errors
when running the plone.app.folder tests in isolation!  I assume that these are
mostly due to the switch to Plone 4 when this package was developed for Plone
3, but come on, these really need to be fixed for this PLIP to be considered
seriously!  Or are the tests intended to be run differently?

* Test coverage is pretty good (86% for plone.folder and plone.app.folder when
  their tests are run together).

* I did not have time to verify the benchmarks included in the PLIP overview,
  but don't have reason to doubt them.

* Any sense of how this affects pickle size and transaction size for operations
  on different sizes of folders?

* As a standalone package, the code is pretty mature, having been used in
  several large projects as well as being the basis for Dexterity's container
  type.


Conclusion
----------

This is that rare PLIP that delivers a simplification in infrastructure, a
performance gain, improved extensibility, and little migration overhead all
at the same time.  Nice work!

FWT vote: +1, as long as the test errors are fixed and adequate migration code
is delivered as planned.
