PLIP 9249: Add TinyMCE as the default visual editor
===================================================

PLIP ticket: http://dev.plone.org/plone/ticket/9249

Review #2 by Martin Aspeli (non-FWT member guest reviewer)

The PLIP was reviewed on Mac OS X 10.5 using python 2.6 and Firefox 3.5.2.

Review steps
------------

- Run buildout with the plip9249-tinymce.cfg file.

- TTW testing of functionality and comparison of features to kupu.

- Visual review of the Products.TinyMCE package.

- Ran tests for Products.TinyMCE and kupu.

- Ran coverage report of Products.TinyMCE.

- Compared size of downloaded resources for both editors using Firebug's net panel.


TinyMCE plip review notes
-------------------------

- I'm using this in a project right now. It works well in Firefox, Safari and
  IE7 at least. It feels more responsive and less random-behaviour-prone than
  Kupu.
  
- Rob is a dedicated maintainer and fixes issues quickly. I've also found the
  code base navigable enough for me to fix things myself. This is good for
  our ability to maintain this going forward, not at least because TinyMCE is
  widely used.

- As David mentioned, it would be nice to configure the default editor in
  a control panel. I think the "markup" control panel could grow this setting
  quite easily, for example. That can be a post-merge task, though.

- We should make sure that upon migration, kupu stays put as the default
  editor. With a UI to change the default setting, people who want TinyMCE
  can switch.

- I agree with David that the TinyMCE control panel should move to the "Plone"
  category and have a name like "TinyMCE visual editor". That can be a
  post-merge task, though.

- The tiny_mce.js and tiny_mce_init.js resources are not marked as mergeable
  or cacheable in portal_javascripts. When I turned this on in our project
  that's using TinyMCE, we had problems with the image/link dialogue boxes.
  That could be a project-specific problem (I couldn't reproduce here), but
  we should ensure that it can be cached properly.

- I've successfully used a third party TinyMCE plugin with Products.TinyMCE,
  by installing it in a browser resource directory and configuring it in the
  TinyMCE control panel. It worked really well.

- As David discovered, definition lists don't appear to work. I don't know if
  that's a problem with TinyMCE itself or the Plone integration.

- I haven't tested having multiple instances on the same form, but this
  obviously needs to work.
  
- Testing as the Zope admin user that's not set any preferences, I get the
  following error trying to add a static text portlet:
  
   __traceback_info__: ( path('nocall:here/%s_wysiwyg_support|here/%s/wysiwyg_support|here/portal_skins/plone_wysiwyg/wysiwyg_support' % (editor, editor)))
   ...
   CompilerError: Path element may not be empty in 'here//wysiwyg_support'

  This may be a problem with the formlig wysiwyg widget, but we should
  investigate. Going to personal preferences and setting the preferred editor
  to TinyMCE works fine.

- Some thoughts from code review (no show-stoppers):

    - There is a mixture of resources in portal_skins and in Zope 3 browser
      views (the 'browser' package). Eventually, I'd like to see it all
      moved to browser resources.
      
    - getConfiguration() in utility.py calls translateButtonsFromKupu()
      which reads configuration from the Kupu tool. It's not clear to me
      what this is for, but it seems TinyMCE should not depend on Kupu except
      for BBB or migration.

    - dialog.css.dtml imports nuplone.css. That gives a 404 error when
      NuPlone is not installed.
      
    - It's possible to specify an "editor CSS" file, but it would be nice to
      also have the option to append this to the list of standard styles,
      or to specify a list of resources. A single stylesheet is probably
      going to be of limited value.
      
    - The TinyMCE utility (utility.py) contains a variable for each possible
      setting (e.g. each toolbar button). It would be more compact and
      extensible to use a mapping, and would allow the UI to be simplified
      with a vocabulary-baesd widget.
      
    - The GenericSetup import/export handler could be made more tolerant
      (but it's way better than Kupu's), e.g. if there are comments inside
      lists. We also need to make sure that all multi-valued elements support
      purge="False" to allow an extension profile to add new values instead of
      overwriting the entire setting.
      
    - I'd like to see the Upload feature separate out the parsing of the
      request and the creation of a new instance. One option may be to 
      use a named adapter to IUploadHandler or similar, and look up an adapter
      on the context folder where the upload happens named 'image' for image
      uploads and 'file' for file uploads. The browser view that receives the
      request could then extract the title, description and file data, look
      up the adapter, and pass it this information to instantiate the object.
      This would allow people to make intelligent choices about where and how
      the content is created for specific use cases.
      
    - In ploneimage.htm.pt, the image-left/image-right/image-inline classes
      are hardcoded. I'd love to be able to plug in some more classes there.
      
    - The setuphandlers in import_handlers.xml and export_handlers.xml should
      be registered as ZCML statements in profiles.zcml.
      
    - In general, the dialog boxes use a lot of 'style' attributes.

Conclusion
----------

About a year ago, I did a project with Kupu where we had a lot of problems
with content authors experiencing seemingly random behaviour from Kupu. This
was worrying, not at least because I couldn't make enough sense of Kupu to
start seriously debugging the problems they were having. On our latest
project, we decided instead to use Products.TinyMCE. We have indeed found a
few bugs, but overall the experience has been extremely positive. Content
authors are happy. It's user friendly and predictable. Pasting from MS Word
even works reasonably well (it had a tendency to break Kupu in utterly weird
ways). And when there have been issues, I've either been able to debug and
fix them myself, or gotten help from Rob to resolve them in a matter of days.

Finally, there are a number of TinyMCE plugins out there, and I get the
impression writing your own is not terribly hard. I used the 'imgmap' plugin,
for example, and it works flawlessly. That is important, because it gives
people a much more robust way to customise their users' editing experience.
We intend to use it to build a custom plugin for browsing and inserting
resources from an external document management system.

My guest reviewer vote: +1.