PLIP 9256: Expand variable substitution in mailing action of plone.app.contentrules
===================================================================================

PLIP ticket: http://dev.plone.org/plone/ticket/9256

Review #2 by Martin Aspeli (non-FWT guest reviewer)

The PLIP was reviewed on Mac OS X 10.5 using python 2.6 and Firefox 3.5.2.

Review steps
------------

- Run tests

- Test TTW

- Read code

Notes and observations
----------------------

* Interpolation is not performed on the email source (from address) or
  the recipients. It should be, because this makes it possible to do things
  like using ${current_user} as the "from" address for an email notifying of
  a workflow change (so that a user can reply to the email to contact the
  person responsible for the change). In the case of the recipients list,
  it should happen before the first line of __call__ which does split(',')
  and builds a list.
  
* There are a few useful substitutions that we could add:
  
    - ${reviewer_emails} exists in collective.contentrules.mail, and gives
      a list of email addresses for all users with the Reviewer role.
      The same exists for Owner, Manager, Reader, Editor and Contributor.
      
    - ${username}, ${user_email}, ${user_fullname} or similar could give
      information about the user that is the cause of an action.

    - We have ${comment} for any change comment, but I'd like to see a rule
      for the workflow comment of the latest workflow state change.
      
* The UI for the 'message' field mentions two variables: ${title} and
  ${url}. It needs to mention that there are other options. Ideally it should
  show all available options. One way to achieve that would be to augment
  the adapter registrations with some help text and add that to a vocabulary,
  or maybe just get the docstring of the available adapter factories (which
  would need to be set as Message objects to be translatable). If that's too
  much work for this PLIP, it could be forgiven with some decent reference
  documentation.
      
* Unrelated to this PLIP, but we should wrap the secureSend() call at the
  end of the action in a try..catch block and only log (at ERROR) a failure
  to send the email. I don't think it should cause a Site Error, at least not
  by default.
  
* We'll also want to update that call if #8814 (mail host replacement) is
  accepted.
      
* Whilst I like and use collective.contentrules.mail, I don't necessarily see
  the "multiple models" abstraction as offering anything obviously useful 
  above the simpler pattern of an arbitrary number of replacers used here. I
  think we've made the right decision to go for this simpler approach in
  Plone core.

* Whilst I think David is right that plone.stringinterp could be made CMF-
  independent, I think what would be left would basically be a regular
  expression and an interface, which isn't terribly hard to replicate for
  anyone who needs this feature outside CMF.

* I disagree with David that we should use plone.indexer to generate
  substitutable values. The use case is quite different, and I don't see
  much to be gained by code sharing here. On the contrary, I think the 
  type of information you want indexed in the catalog and the type of
  information you want in a mail message are quite different.

Conclusion
----------

I'd like to see interpolation on the source and target email addresses go
in, and we need to make sure the list of available options is clearly
documented. Otherwise this looks good.

My non-FWT vote: +1.