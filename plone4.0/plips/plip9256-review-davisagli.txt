PLIP 9256: Expand variable substitution in mailing action of plone.app.contentrules
===================================================================================

PLIP ticket: http://dev.plone.org/plone/ticket/9256

Review #1 by David Glick (dglick@gmail.com, davisagli on irc)

The PLIP was reviewed on Mac OS X 10.5.8 using python 2.6 and Firefox 3.5.2.


Review steps
------------

- Run buildout using the plip9256-contentrules-variables.cfg file.

- Try the new functionality TTW.

- Visual review of the new plone.stringinterp packages and changes in
  plone.app.contentrules.

- Run tests for plone.stringinterp and plone.app.contentrules

- Check test coverage


Notes and observations
----------------------

* The original PLIP summary talked about adjusting the management UI for
  the mail content rule to make it clear what variables are available and
  how they are used.  It would be really nice if that could happen, as
  without it this feature is pretty hidden.  Documentation on plone.org
  would also help, of course.

* I set up a mail content rule and interpolation worked as expected. It
  works in the subject in addition to the message -- nice.

* The basic purpose of the plone.stringinterp package seems like something
  that could be generically useful (to fill in values in a template based on
  doing named adapter lookups on a context) outside of the Plone context.
  However that opportunity is reduced by the inclusion of a number of
  default string substitutions which rely on CMFCore, CMFPlone, CMFEditions,
  etc.  Maybe these belong elsewhere?

* It also strikes me that the contract fulfilled by an IStringSubstitution
  adapter is fairly similar to that of the plone.indexer package's indexers.
  Both are used to fetch named values from some context, and if this PLIP
  used the IndexableObjectWrapper (which is indexer-based) then any content
  that supports being catalogued would automatically be supported for
  filling in templates, regardless of whether it directly implements the
  dublin core interface as is assumed by the string substitution adapters
  in plone.stringinterp.
  
  Using indexers also means that different ways of providing values could
  be provided based on some marker interface on the context.
  
  However, using indexers would require a change to the way existing
  indexers are registered.  Currently an indexer is a named adapter of a
  context and a catalog.  If we were to use them for fetching template
  variables, then it would probably make more sense to call the latter
  a "metadata context" rather than a catalog, and it would be a good thing
  to have (so that the "template filling" metadata context might have
  slightly different values available to it than the cataloging
  metadata context, via different adapters (that is, the indexers, which
  now should maybe be called metadata providers)).  The problem is that
  the @indexer decorator, which is typically used to register indexers,
  currently defaults to using IZCatalog for the catalog/metadata context
  interface...which means that either the existing indexers would need
  to be duplicated, or that default would need to change.

* I haven't had a chance to benchmark the effects of doing variable
  interpolation this way.  It would be good if that could be done as a
  sanity check before merging this.


Conclusion
----------

As described above I think there are some opportunities for improving this
code, but it's not bad as is and I don't think the reservations/ideas above
should necessarily hold up acceptance of this PLIP.

My FWT vote: +1.


Update, 9/27/09
===============

The updates to this PLIP (mainly the addition of a table listing the
available variables) look good and I agree that this is ready for merge.
+1.

It might be a good thing to check in with someone for UI feedback on the
table of variables, but I don't have any worthwhile advice to offer on that,
and it's certainly better than nothing. :)
